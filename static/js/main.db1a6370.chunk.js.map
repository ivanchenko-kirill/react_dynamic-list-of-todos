{"version":3,"sources":["components/TodoList/TodoList.tsx","api.ts","components/CurrentUser/CurrentUser.tsx","App.tsx","index.tsx"],"names":["FilterByStatusTypes","getData","url","fetch","then","response","ok","Error","status","statusText","json","getUser","userId","TodoList","state","todos","searchQuery","filterByStatus","hasLoadingError","isShuffled","handleSearch","target","setState","value","handleSelect","randomise","sort","Math","random","getFilteredTodos","queryLow","toLowerCase","filter","todo","active","completed","all","title","includes","a","this","props","selectedUserId","onUserSelect","filteredTodos","className","type","placeholder","onChange","onClick","disabled","length","map","classNames","checked","id","React","Component","CurrentUser","currentUser","loadUser","user","prevProps","onReset","name","email","phone","App","selectUser","resetSelectedUser","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.db1a6370.chunk.js","sourcesContent":["import React from 'react';\nimport classNames from 'classnames';\nimport { getTodos } from '../../api';\nimport './TodoList.scss';\n\nenum FilterByStatusTypes {\n  all = 'all',\n  active = 'active',\n  completed = 'completed',\n}\n\ninterface State {\n  todos: Todo[];\n  searchQuery: string;\n  filterByStatus: FilterByStatusTypes;\n  hasLoadingError: boolean;\n  isShuffled: boolean\n}\n\ninterface Props {\n  selectedUserId: number;\n  onUserSelect: (userId: number) => void;\n}\n\nexport class TodoList extends React.Component<Props, State> {\n  state: State = {\n    todos: [],\n    searchQuery: '',\n    filterByStatus: '' as FilterByStatusTypes,\n    hasLoadingError: false,\n    isShuffled: false,\n  };\n\n  async componentDidMount() {\n    try {\n      const todos = await getTodos();\n\n      this.setState({ todos });\n    } catch {\n      this.setState({ hasLoadingError: true });\n    }\n  }\n\n  handleSearch = ({ target }: React.ChangeEvent<HTMLInputElement>) => {\n    this.setState({ searchQuery: target.value });\n  };\n\n  handleSelect = ({ target }: React.ChangeEvent<HTMLSelectElement>) => {\n    this.setState({ filterByStatus: target.value as FilterByStatusTypes });\n  };\n\n  randomise = (todos: Todo[]) => {\n    return [...todos].sort(() => Math.random() - 0.5);\n  };\n\n  getFilteredTodos = () => {\n    const { searchQuery, todos, filterByStatus } = this.state;\n    const queryLow = searchQuery.toLowerCase();\n\n    const filteredTodos = todos.filter(todo => {\n      switch (filterByStatus) {\n        case FilterByStatusTypes.active:\n          return !todo.completed;\n\n        case FilterByStatusTypes.completed:\n          return todo.completed;\n\n        case FilterByStatusTypes.all:\n        default:\n          return todo;\n      }\n    });\n\n    return filteredTodos.filter(todo => (\n      todo.title\n      && todo.title.toLowerCase().includes(queryLow)\n    ));\n  };\n\n  render() {\n    const {\n      searchQuery,\n      filterByStatus,\n      hasLoadingError,\n      isShuffled,\n    } = this.state;\n    const { selectedUserId, onUserSelect } = this.props;\n    let filteredTodos = this.getFilteredTodos();\n\n    if (isShuffled) {\n      filteredTodos = this.randomise(filteredTodos);\n    }\n\n    return (\n      <div className=\"TodoList\">\n        <h2>Todos:</h2>\n\n        <div className=\"TodoList__controls\">\n          <input\n            value={searchQuery}\n            type=\"text\"\n            placeholder=\"Search by title\"\n            onChange={this.handleSearch}\n          />\n\n          <button\n            type=\"button\"\n            className=\"button\"\n            onClick={() => this.setState({ isShuffled: true })}\n          >\n            Randomise\n          </button>\n\n          <select\n            onChange={this.handleSelect}\n            value={filterByStatus}\n          >\n            <option value=\"\" disabled>\n              Choose status type\n            </option>\n            <option value=\"all\">\n              All\n            </option>\n            <option value=\"active\">\n              Active\n            </option>\n            <option value=\"completed\">\n              Completed\n            </option>\n          </select>\n        </div>\n\n        <div className=\"TodoList__list-container\">\n          {filteredTodos.length > 0\n            ? (\n              <ul className=\"TodoList__list\">\n                {filteredTodos.map(todo => (\n                  <li\n                    key={todo.id}\n                    className={\n                      classNames('TodoList__item', {\n                        'TodoList__item--checked': todo.completed,\n                        'TodoList__item--unchecked': !todo.completed,\n                      })\n                    }\n                  >\n                    <label>\n                      <input\n                        type=\"checkbox\"\n                        checked={todo.completed}\n                      />\n                      <p>{todo.title}</p>\n                    </label>\n\n                    <button\n                      type=\"button\"\n                      className={\n                        classNames('button TodoList__user-button', {\n                          'TodoList__user-button--selected': todo.userId === selectedUserId,\n                        })\n                      }\n                      onClick={() => onUserSelect(todo.userId)}\n                    >\n                      {`User #${todo.userId}`}\n                    </button>\n                  </li>\n                ))}\n              </ul>\n            )\n            : <h2>Loading...</h2>}\n          {hasLoadingError\n            && <h2>Server is not responding</h2>}\n        </div>\n      </div>\n    );\n  }\n}\n","const BASE_URL = 'https://mate.academy/students-api';\n\nconst getData = (url: string) => {\n  return fetch(`${BASE_URL}${url}`)\n    .then(response => {\n      if (!response.ok) {\n        throw new Error(`${response.status} - ${response.statusText}`);\n      }\n\n      return response.json();\n    });\n};\n\nexport const getTodos = (): Promise<Todo[]> => {\n  return getData('/todos');\n};\n\nexport const getUser = (userId: number): Promise<User> => {\n  return getData(`/users/${+userId}`);\n};\n","import React from 'react';\nimport { getUser } from '../../api';\nimport './CurrentUser.scss';\n\ninterface Props {\n  selectedUserId: number;\n  onReset: () => void;\n}\n\ninterface State {\n  currentUser: null | User;\n  hasLoadingError: boolean;\n}\n\nexport class CurrentUser extends React.Component<Props, State> {\n  state: State = {\n    currentUser: null,\n    hasLoadingError: false,\n  };\n\n  componentDidMount() {\n    this.loadUser();\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    if (prevProps !== this.props) {\n      this.loadUser();\n    }\n  }\n\n  loadUser = async () => {\n    try {\n      const { selectedUserId } = this.props;\n\n      const user = await getUser(selectedUserId);\n\n      this.setState({\n        currentUser: user,\n        hasLoadingError: false,\n      });\n    } catch {\n      this.setState({ hasLoadingError: true });\n    }\n  };\n\n  render() {\n    const { currentUser, hasLoadingError } = this.state;\n    const { onReset } = this.props;\n\n    return (\n      <div className=\"CurrentUser\">\n        {hasLoadingError\n          ? <h2>Cannot load user</h2>\n          : (\n            <>\n              <h2 className=\"CurrentUser__title\">\n                <span>{`Selected user: ${currentUser?.id}`}</span>\n              </h2>\n              <h3 className=\"CurrentUser__name\">\n                {currentUser?.name}\n              </h3>\n              <p className=\"CurrentUser__email\">\n                {currentUser?.email}\n              </p>\n              <p className=\"CurrentUser__phone\">\n                {currentUser?.phone}\n              </p>\n\n              <button\n                type=\"button\"\n                className=\"button CurrentUser__clear\"\n                onClick={onReset}\n              >\n                Clear\n              </button>\n            </>\n          )}\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\n\ninterface State {\n  selectedUserId: number;\n}\n\nclass App extends React.Component<{}, State> {\n  state: State = {\n    selectedUserId: 0,\n  };\n\n  selectUser = (userId: number) => {\n    this.setState({ selectedUserId: userId });\n  };\n\n  resetSelectedUser = () => {\n    this.setState({ selectedUserId: 0 });\n  };\n\n  render() {\n    const { selectedUserId } = this.state;\n\n    return (\n      <div className=\"App\">\n        <div className=\"App__sidebar\">\n          <TodoList\n            selectedUserId={selectedUserId}\n            onUserSelect={this.selectUser}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          <div className=\"App__content-container\">\n            {selectedUserId ? (\n              <CurrentUser\n                selectedUserId={selectedUserId}\n                onReset={this.resetSelectedUser}\n              />\n            ) : 'No user selected'}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}